/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cloud.dispatcher.gateway.pay.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-23")
public class ThriftRefundAPI {

    public interface Iface {

        public long registerRefundOrder(String payingId, int fee, String reason, String notify, String source) throws org.apache.thrift.TException;

        public int getRefundOrderPhase(String payingId, long id, String source) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void registerRefundOrder(String payingId, int fee, String reason, String notify, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getRefundOrderPhase(String payingId, long id, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public long registerRefundOrder(String payingId, int fee, String reason, String notify, String source) throws org.apache.thrift.TException {
            send_registerRefundOrder(payingId, fee, reason, notify, source);
            return recv_registerRefundOrder();
        }

        public void send_registerRefundOrder(String payingId, int fee, String reason, String notify, String source) throws org.apache.thrift.TException {
            registerRefundOrder_args args = new registerRefundOrder_args();
            args.setPayingId(payingId);
            args.setFee(fee);
            args.setReason(reason);
            args.setNotify(notify);
            args.setSource(source);
            sendBase("registerRefundOrder", args);
        }

        public long recv_registerRefundOrder() throws org.apache.thrift.TException {
            registerRefundOrder_result result = new registerRefundOrder_result();
            receiveBase(result, "registerRefundOrder");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerRefundOrder failed: unknown result");
        }

        public int getRefundOrderPhase(String payingId, long id, String source) throws org.apache.thrift.TException {
            send_getRefundOrderPhase(payingId, id, source);
            return recv_getRefundOrderPhase();
        }

        public void send_getRefundOrderPhase(String payingId, long id, String source) throws org.apache.thrift.TException {
            getRefundOrderPhase_args args = new getRefundOrderPhase_args();
            args.setPayingId(payingId);
            args.setId(id);
            args.setSource(source);
            sendBase("getRefundOrderPhase", args);
        }

        public int recv_getRefundOrderPhase() throws org.apache.thrift.TException {
            getRefundOrderPhase_result result = new getRefundOrderPhase_result();
            receiveBase(result, "getRefundOrderPhase");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundOrderPhase failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void registerRefundOrder(String payingId, int fee, String reason, String notify, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            registerRefundOrder_call method_call = new registerRefundOrder_call(payingId, fee, reason, notify, source, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class registerRefundOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String payingId;
            private int fee;
            private String reason;
            private String notify;
            private String source;

            public registerRefundOrder_call(String payingId, int fee, String reason, String notify, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.payingId = payingId;
                this.fee = fee;
                this.reason = reason;
                this.notify = notify;
                this.source = source;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerRefundOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
                registerRefundOrder_args args = new registerRefundOrder_args();
                args.setPayingId(payingId);
                args.setFee(fee);
                args.setReason(reason);
                args.setNotify(notify);
                args.setSource(source);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public long getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_registerRefundOrder();
            }
        }

        public void getRefundOrderPhase(String payingId, long id, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRefundOrderPhase_call method_call = new getRefundOrderPhase_call(payingId, id, source, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRefundOrderPhase_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String payingId;
            private long id;
            private String source;

            public getRefundOrderPhase_call(String payingId, long id, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.payingId = payingId;
                this.id = id;
                this.source = source;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundOrderPhase", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRefundOrderPhase_args args = new getRefundOrderPhase_args();
                args.setPayingId(payingId);
                args.setId(id);
                args.setSource(source);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRefundOrderPhase();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("registerRefundOrder", new registerRefundOrder());
            processMap.put("getRefundOrderPhase", new getRefundOrderPhase());
            return processMap;
        }

        public static class registerRefundOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerRefundOrder_args> {
            public registerRefundOrder() {
                super("registerRefundOrder");
            }

            public registerRefundOrder_args getEmptyArgsInstance() {
                return new registerRefundOrder_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public registerRefundOrder_result getResult(I iface, registerRefundOrder_args args) throws org.apache.thrift.TException {
                registerRefundOrder_result result = new registerRefundOrder_result();
                result.success = iface.registerRefundOrder(args.payingId, args.fee, args.reason, args.notify, args.source);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getRefundOrderPhase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundOrderPhase_args> {
            public getRefundOrderPhase() {
                super("getRefundOrderPhase");
            }

            public getRefundOrderPhase_args getEmptyArgsInstance() {
                return new getRefundOrderPhase_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRefundOrderPhase_result getResult(I iface, getRefundOrderPhase_args args) throws org.apache.thrift.TException {
                getRefundOrderPhase_result result = new getRefundOrderPhase_result();
                result.success = iface.getRefundOrderPhase(args.payingId, args.id, args.source);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("registerRefundOrder", new registerRefundOrder());
            processMap.put("getRefundOrderPhase", new getRefundOrderPhase());
            return processMap;
        }

        public static class registerRefundOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerRefundOrder_args, Long> {
            public registerRefundOrder() {
                super("registerRefundOrder");
            }

            public registerRefundOrder_args getEmptyArgsInstance() {
                return new registerRefundOrder_args();
            }

            public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Long>() {
                    public void onComplete(Long o) {
                        registerRefundOrder_result result = new registerRefundOrder_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        registerRefundOrder_result result = new registerRefundOrder_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, registerRefundOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
                iface.registerRefundOrder(args.payingId, args.fee, args.reason, args.notify, args.source, resultHandler);
            }
        }

        public static class getRefundOrderPhase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundOrderPhase_args, Integer> {
            public getRefundOrderPhase() {
                super("getRefundOrderPhase");
            }

            public getRefundOrderPhase_args getEmptyArgsInstance() {
                return new getRefundOrderPhase_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        getRefundOrderPhase_result result = new getRefundOrderPhase_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getRefundOrderPhase_result result = new getRefundOrderPhase_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRefundOrderPhase_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.getRefundOrderPhase(args.payingId, args.id, args.source, resultHandler);
            }
        }

    }

    public static class registerRefundOrder_args implements org.apache.thrift.TBase<registerRefundOrder_args, registerRefundOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerRefundOrder_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerRefundOrder_args");

        private static final org.apache.thrift.protocol.TField PAYING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("payingId", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("notify", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short) 5);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new registerRefundOrder_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new registerRefundOrder_argsTupleSchemeFactory());
        }

        public String payingId; // required
        public int fee; // required
        public String reason; // required
        public String notify; // required
        public String source; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PAYING_ID((short) 1, "payingId"),
            FEE((short) 2, "fee"),
            REASON((short) 3, "reason"),
            NOTIFY((short) 4, "notify"),
            SOURCE((short) 5, "source");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PAYING_ID
                        return PAYING_ID;
                    case 2: // FEE
                        return FEE;
                    case 3: // REASON
                        return REASON;
                    case 4: // NOTIFY
                        return NOTIFY;
                    case 5: // SOURCE
                        return SOURCE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FEE_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PAYING_ID, new org.apache.thrift.meta_data.FieldMetaData("payingId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("notify", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerRefundOrder_args.class, metaDataMap);
        }

        public registerRefundOrder_args() {
        }

        public registerRefundOrder_args(
                String payingId,
                int fee,
                String reason,
                String notify,
                String source) {
            this();
            this.payingId = payingId;
            this.fee = fee;
            setFeeIsSet(true);
            this.reason = reason;
            this.notify = notify;
            this.source = source;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerRefundOrder_args(registerRefundOrder_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetPayingId()) {
                this.payingId = other.payingId;
            }
            this.fee = other.fee;
            if (other.isSetReason()) {
                this.reason = other.reason;
            }
            if (other.isSetNotify()) {
                this.notify = other.notify;
            }
            if (other.isSetSource()) {
                this.source = other.source;
            }
        }

        public registerRefundOrder_args deepCopy() {
            return new registerRefundOrder_args(this);
        }

        @Override
        public void clear() {
            this.payingId = null;
            setFeeIsSet(false);
            this.fee = 0;
            this.reason = null;
            this.notify = null;
            this.source = null;
        }

        public String getPayingId() {
            return this.payingId;
        }

        public registerRefundOrder_args setPayingId(String payingId) {
            this.payingId = payingId;
            return this;
        }

        public void unsetPayingId() {
            this.payingId = null;
        }

        /**
         * Returns true if field payingId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPayingId() {
            return this.payingId != null;
        }

        public void setPayingIdIsSet(boolean value) {
            if (!value) {
                this.payingId = null;
            }
        }

        public int getFee() {
            return this.fee;
        }

        public registerRefundOrder_args setFee(int fee) {
            this.fee = fee;
            setFeeIsSet(true);
            return this;
        }

        public void unsetFee() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEE_ISSET_ID);
        }

        /**
         * Returns true if field fee is set (has been assigned a value) and false otherwise
         */
        public boolean isSetFee() {
            return EncodingUtils.testBit(__isset_bitfield, __FEE_ISSET_ID);
        }

        public void setFeeIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEE_ISSET_ID, value);
        }

        public String getReason() {
            return this.reason;
        }

        public registerRefundOrder_args setReason(String reason) {
            this.reason = reason;
            return this;
        }

        public void unsetReason() {
            this.reason = null;
        }

        /**
         * Returns true if field reason is set (has been assigned a value) and false otherwise
         */
        public boolean isSetReason() {
            return this.reason != null;
        }

        public void setReasonIsSet(boolean value) {
            if (!value) {
                this.reason = null;
            }
        }

        public String getNotify() {
            return this.notify;
        }

        public registerRefundOrder_args setNotify(String notify) {
            this.notify = notify;
            return this;
        }

        public void unsetNotify() {
            this.notify = null;
        }

        /**
         * Returns true if field notify is set (has been assigned a value) and false otherwise
         */
        public boolean isSetNotify() {
            return this.notify != null;
        }

        public void setNotifyIsSet(boolean value) {
            if (!value) {
                this.notify = null;
            }
        }

        public String getSource() {
            return this.source;
        }

        public registerRefundOrder_args setSource(String source) {
            this.source = source;
            return this;
        }

        public void unsetSource() {
            this.source = null;
        }

        /**
         * Returns true if field source is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSource() {
            return this.source != null;
        }

        public void setSourceIsSet(boolean value) {
            if (!value) {
                this.source = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PAYING_ID:
                    if (value == null) {
                        unsetPayingId();
                    } else {
                        setPayingId((String) value);
                    }
                    break;

                case FEE:
                    if (value == null) {
                        unsetFee();
                    } else {
                        setFee((Integer) value);
                    }
                    break;

                case REASON:
                    if (value == null) {
                        unsetReason();
                    } else {
                        setReason((String) value);
                    }
                    break;

                case NOTIFY:
                    if (value == null) {
                        unsetNotify();
                    } else {
                        setNotify((String) value);
                    }
                    break;

                case SOURCE:
                    if (value == null) {
                        unsetSource();
                    } else {
                        setSource((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PAYING_ID:
                    return getPayingId();

                case FEE:
                    return Integer.valueOf(getFee());

                case REASON:
                    return getReason();

                case NOTIFY:
                    return getNotify();

                case SOURCE:
                    return getSource();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PAYING_ID:
                    return isSetPayingId();
                case FEE:
                    return isSetFee();
                case REASON:
                    return isSetReason();
                case NOTIFY:
                    return isSetNotify();
                case SOURCE:
                    return isSetSource();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerRefundOrder_args)
                return this.equals((registerRefundOrder_args) that);
            return false;
        }

        public boolean equals(registerRefundOrder_args that) {
            if (that == null)
                return false;

            boolean this_present_payingId = true && this.isSetPayingId();
            boolean that_present_payingId = true && that.isSetPayingId();
            if (this_present_payingId || that_present_payingId) {
                if (!(this_present_payingId && that_present_payingId))
                    return false;
                if (!this.payingId.equals(that.payingId))
                    return false;
            }

            boolean this_present_fee = true;
            boolean that_present_fee = true;
            if (this_present_fee || that_present_fee) {
                if (!(this_present_fee && that_present_fee))
                    return false;
                if (this.fee != that.fee)
                    return false;
            }

            boolean this_present_reason = true && this.isSetReason();
            boolean that_present_reason = true && that.isSetReason();
            if (this_present_reason || that_present_reason) {
                if (!(this_present_reason && that_present_reason))
                    return false;
                if (!this.reason.equals(that.reason))
                    return false;
            }

            boolean this_present_notify = true && this.isSetNotify();
            boolean that_present_notify = true && that.isSetNotify();
            if (this_present_notify || that_present_notify) {
                if (!(this_present_notify && that_present_notify))
                    return false;
                if (!this.notify.equals(that.notify))
                    return false;
            }

            boolean this_present_source = true && this.isSetSource();
            boolean that_present_source = true && that.isSetSource();
            if (this_present_source || that_present_source) {
                if (!(this_present_source && that_present_source))
                    return false;
                if (!this.source.equals(that.source))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_payingId = true && (isSetPayingId());
            list.add(present_payingId);
            if (present_payingId)
                list.add(payingId);

            boolean present_fee = true;
            list.add(present_fee);
            if (present_fee)
                list.add(fee);

            boolean present_reason = true && (isSetReason());
            list.add(present_reason);
            if (present_reason)
                list.add(reason);

            boolean present_notify = true && (isSetNotify());
            list.add(present_notify);
            if (present_notify)
                list.add(notify);

            boolean present_source = true && (isSetSource());
            list.add(present_source);
            if (present_source)
                list.add(source);

            return list.hashCode();
        }

        @Override
        public int compareTo(registerRefundOrder_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPayingId()).compareTo(other.isSetPayingId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPayingId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payingId, other.payingId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFee()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReason()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetNotify()).compareTo(other.isSetNotify());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNotify()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notify, other.notify);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSource()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerRefundOrder_args(");
            boolean first = true;

            sb.append("payingId:");
            if (this.payingId == null) {
                sb.append("null");
            } else {
                sb.append(this.payingId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("fee:");
            sb.append(this.fee);
            first = false;
            if (!first) sb.append(", ");
            sb.append("reason:");
            if (this.reason == null) {
                sb.append("null");
            } else {
                sb.append(this.reason);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("notify:");
            if (this.notify == null) {
                sb.append("null");
            } else {
                sb.append(this.notify);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("source:");
            if (this.source == null) {
                sb.append("null");
            } else {
                sb.append(this.source);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class registerRefundOrder_argsStandardSchemeFactory implements SchemeFactory {
            public registerRefundOrder_argsStandardScheme getScheme() {
                return new registerRefundOrder_argsStandardScheme();
            }
        }

        private static class registerRefundOrder_argsStandardScheme extends StandardScheme<registerRefundOrder_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerRefundOrder_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PAYING_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.payingId = iprot.readString();
                                struct.setPayingIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // FEE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fee = iprot.readI32();
                                struct.setFeeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // REASON
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.reason = iprot.readString();
                                struct.setReasonIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // NOTIFY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.notify = iprot.readString();
                                struct.setNotifyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // SOURCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.source = iprot.readString();
                                struct.setSourceIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerRefundOrder_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.payingId != null) {
                    oprot.writeFieldBegin(PAYING_ID_FIELD_DESC);
                    oprot.writeString(struct.payingId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(FEE_FIELD_DESC);
                oprot.writeI32(struct.fee);
                oprot.writeFieldEnd();
                if (struct.reason != null) {
                    oprot.writeFieldBegin(REASON_FIELD_DESC);
                    oprot.writeString(struct.reason);
                    oprot.writeFieldEnd();
                }
                if (struct.notify != null) {
                    oprot.writeFieldBegin(NOTIFY_FIELD_DESC);
                    oprot.writeString(struct.notify);
                    oprot.writeFieldEnd();
                }
                if (struct.source != null) {
                    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
                    oprot.writeString(struct.source);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerRefundOrder_argsTupleSchemeFactory implements SchemeFactory {
            public registerRefundOrder_argsTupleScheme getScheme() {
                return new registerRefundOrder_argsTupleScheme();
            }
        }

        private static class registerRefundOrder_argsTupleScheme extends TupleScheme<registerRefundOrder_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerRefundOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPayingId()) {
                    optionals.set(0);
                }
                if (struct.isSetFee()) {
                    optionals.set(1);
                }
                if (struct.isSetReason()) {
                    optionals.set(2);
                }
                if (struct.isSetNotify()) {
                    optionals.set(3);
                }
                if (struct.isSetSource()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetPayingId()) {
                    oprot.writeString(struct.payingId);
                }
                if (struct.isSetFee()) {
                    oprot.writeI32(struct.fee);
                }
                if (struct.isSetReason()) {
                    oprot.writeString(struct.reason);
                }
                if (struct.isSetNotify()) {
                    oprot.writeString(struct.notify);
                }
                if (struct.isSetSource()) {
                    oprot.writeString(struct.source);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerRefundOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.payingId = iprot.readString();
                    struct.setPayingIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.fee = iprot.readI32();
                    struct.setFeeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.reason = iprot.readString();
                    struct.setReasonIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.notify = iprot.readString();
                    struct.setNotifyIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.source = iprot.readString();
                    struct.setSourceIsSet(true);
                }
            }
        }

    }

    public static class registerRefundOrder_result implements org.apache.thrift.TBase<registerRefundOrder_result, registerRefundOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerRefundOrder_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerRefundOrder_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new registerRefundOrder_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new registerRefundOrder_resultTupleSchemeFactory());
        }

        public long success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerRefundOrder_result.class, metaDataMap);
        }

        public registerRefundOrder_result() {
        }

        public registerRefundOrder_result(
                long success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerRefundOrder_result(registerRefundOrder_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public registerRefundOrder_result deepCopy() {
            return new registerRefundOrder_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        public registerRefundOrder_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Long.valueOf(getSuccess());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerRefundOrder_result)
                return this.equals((registerRefundOrder_result) that);
            return false;
        }

        public boolean equals(registerRefundOrder_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(registerRefundOrder_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerRefundOrder_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class registerRefundOrder_resultStandardSchemeFactory implements SchemeFactory {
            public registerRefundOrder_resultStandardScheme getScheme() {
                return new registerRefundOrder_resultStandardScheme();
            }
        }

        private static class registerRefundOrder_resultStandardScheme extends StandardScheme<registerRefundOrder_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerRefundOrder_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerRefundOrder_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerRefundOrder_resultTupleSchemeFactory implements SchemeFactory {
            public registerRefundOrder_resultTupleScheme getScheme() {
                return new registerRefundOrder_resultTupleScheme();
            }
        }

        private static class registerRefundOrder_resultTupleScheme extends TupleScheme<registerRefundOrder_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerRefundOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerRefundOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getRefundOrderPhase_args implements org.apache.thrift.TBase<getRefundOrderPhase_args, getRefundOrderPhase_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundOrderPhase_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundOrderPhase_args");

        private static final org.apache.thrift.protocol.TField PAYING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("payingId", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getRefundOrderPhase_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getRefundOrderPhase_argsTupleSchemeFactory());
        }

        public String payingId; // required
        public long id; // required
        public String source; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PAYING_ID((short) 1, "payingId"),
            ID((short) 2, "id"),
            SOURCE((short) 3, "source");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PAYING_ID
                        return PAYING_ID;
                    case 2: // ID
                        return ID;
                    case 3: // SOURCE
                        return SOURCE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PAYING_ID, new org.apache.thrift.meta_data.FieldMetaData("payingId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundOrderPhase_args.class, metaDataMap);
        }

        public getRefundOrderPhase_args() {
        }

        public getRefundOrderPhase_args(
                String payingId,
                long id,
                String source) {
            this();
            this.payingId = payingId;
            this.id = id;
            setIdIsSet(true);
            this.source = source;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRefundOrderPhase_args(getRefundOrderPhase_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetPayingId()) {
                this.payingId = other.payingId;
            }
            this.id = other.id;
            if (other.isSetSource()) {
                this.source = other.source;
            }
        }

        public getRefundOrderPhase_args deepCopy() {
            return new getRefundOrderPhase_args(this);
        }

        @Override
        public void clear() {
            this.payingId = null;
            setIdIsSet(false);
            this.id = 0;
            this.source = null;
        }

        public String getPayingId() {
            return this.payingId;
        }

        public getRefundOrderPhase_args setPayingId(String payingId) {
            this.payingId = payingId;
            return this;
        }

        public void unsetPayingId() {
            this.payingId = null;
        }

        /**
         * Returns true if field payingId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPayingId() {
            return this.payingId != null;
        }

        public void setPayingIdIsSet(boolean value) {
            if (!value) {
                this.payingId = null;
            }
        }

        public long getId() {
            return this.id;
        }

        public getRefundOrderPhase_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /**
         * Returns true if field id is set (has been assigned a value) and false otherwise
         */
        public boolean isSetId() {
            return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public String getSource() {
            return this.source;
        }

        public getRefundOrderPhase_args setSource(String source) {
            this.source = source;
            return this;
        }

        public void unsetSource() {
            this.source = null;
        }

        /**
         * Returns true if field source is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSource() {
            return this.source != null;
        }

        public void setSourceIsSet(boolean value) {
            if (!value) {
                this.source = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PAYING_ID:
                    if (value == null) {
                        unsetPayingId();
                    } else {
                        setPayingId((String) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((Long) value);
                    }
                    break;

                case SOURCE:
                    if (value == null) {
                        unsetSource();
                    } else {
                        setSource((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PAYING_ID:
                    return getPayingId();

                case ID:
                    return Long.valueOf(getId());

                case SOURCE:
                    return getSource();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PAYING_ID:
                    return isSetPayingId();
                case ID:
                    return isSetId();
                case SOURCE:
                    return isSetSource();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getRefundOrderPhase_args)
                return this.equals((getRefundOrderPhase_args) that);
            return false;
        }

        public boolean equals(getRefundOrderPhase_args that) {
            if (that == null)
                return false;

            boolean this_present_payingId = true && this.isSetPayingId();
            boolean that_present_payingId = true && that.isSetPayingId();
            if (this_present_payingId || that_present_payingId) {
                if (!(this_present_payingId && that_present_payingId))
                    return false;
                if (!this.payingId.equals(that.payingId))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_source = true && this.isSetSource();
            boolean that_present_source = true && that.isSetSource();
            if (this_present_source || that_present_source) {
                if (!(this_present_source && that_present_source))
                    return false;
                if (!this.source.equals(that.source))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_payingId = true && (isSetPayingId());
            list.add(present_payingId);
            if (present_payingId)
                list.add(payingId);

            boolean present_id = true;
            list.add(present_id);
            if (present_id)
                list.add(id);

            boolean present_source = true && (isSetSource());
            list.add(present_source);
            if (present_source)
                list.add(source);

            return list.hashCode();
        }

        @Override
        public int compareTo(getRefundOrderPhase_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPayingId()).compareTo(other.isSetPayingId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPayingId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payingId, other.payingId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSource()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getRefundOrderPhase_args(");
            boolean first = true;

            sb.append("payingId:");
            if (this.payingId == null) {
                sb.append("null");
            } else {
                sb.append(this.payingId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("source:");
            if (this.source == null) {
                sb.append("null");
            } else {
                sb.append(this.source);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRefundOrderPhase_argsStandardSchemeFactory implements SchemeFactory {
            public getRefundOrderPhase_argsStandardScheme getScheme() {
                return new getRefundOrderPhase_argsStandardScheme();
            }
        }

        private static class getRefundOrderPhase_argsStandardScheme extends StandardScheme<getRefundOrderPhase_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundOrderPhase_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PAYING_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.payingId = iprot.readString();
                                struct.setPayingIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SOURCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.source = iprot.readString();
                                struct.setSourceIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundOrderPhase_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.payingId != null) {
                    oprot.writeFieldBegin(PAYING_ID_FIELD_DESC);
                    oprot.writeString(struct.payingId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.source != null) {
                    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
                    oprot.writeString(struct.source);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRefundOrderPhase_argsTupleSchemeFactory implements SchemeFactory {
            public getRefundOrderPhase_argsTupleScheme getScheme() {
                return new getRefundOrderPhase_argsTupleScheme();
            }
        }

        private static class getRefundOrderPhase_argsTupleScheme extends TupleScheme<getRefundOrderPhase_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRefundOrderPhase_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPayingId()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                if (struct.isSetSource()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetPayingId()) {
                    oprot.writeString(struct.payingId);
                }
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetSource()) {
                    oprot.writeString(struct.source);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRefundOrderPhase_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.payingId = iprot.readString();
                    struct.setPayingIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.source = iprot.readString();
                    struct.setSourceIsSet(true);
                }
            }
        }

    }

    public static class getRefundOrderPhase_result implements org.apache.thrift.TBase<getRefundOrderPhase_result, getRefundOrderPhase_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundOrderPhase_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundOrderPhase_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getRefundOrderPhase_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getRefundOrderPhase_resultTupleSchemeFactory());
        }

        public int success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundOrderPhase_result.class, metaDataMap);
        }

        public getRefundOrderPhase_result() {
        }

        public getRefundOrderPhase_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRefundOrderPhase_result(getRefundOrderPhase_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public getRefundOrderPhase_result deepCopy() {
            return new getRefundOrderPhase_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public getRefundOrderPhase_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Integer.valueOf(getSuccess());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getRefundOrderPhase_result)
                return this.equals((getRefundOrderPhase_result) that);
            return false;
        }

        public boolean equals(getRefundOrderPhase_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getRefundOrderPhase_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getRefundOrderPhase_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRefundOrderPhase_resultStandardSchemeFactory implements SchemeFactory {
            public getRefundOrderPhase_resultStandardScheme getScheme() {
                return new getRefundOrderPhase_resultStandardScheme();
            }
        }

        private static class getRefundOrderPhase_resultStandardScheme extends StandardScheme<getRefundOrderPhase_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundOrderPhase_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundOrderPhase_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRefundOrderPhase_resultTupleSchemeFactory implements SchemeFactory {
            public getRefundOrderPhase_resultTupleScheme getScheme() {
                return new getRefundOrderPhase_resultTupleScheme();
            }
        }

        private static class getRefundOrderPhase_resultTupleScheme extends TupleScheme<getRefundOrderPhase_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRefundOrderPhase_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRefundOrderPhase_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
