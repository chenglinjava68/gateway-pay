/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cloud.dispatcher.gateway.pay.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-22")
public class ThriftPayingAPI {

    public interface Iface {

        public String registerPayingOrder(Map<String, String> usrParamsMap, Map<String, String> appParamsMap, Map<String, String> oppParamsMap, String source) throws org.apache.thrift.TException;

        public int getPayingOrderPhase(String id, String source) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void registerPayingOrder(Map<String, String> usrParamsMap, Map<String, String> appParamsMap, Map<String, String> oppParamsMap, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getPayingOrderPhase(String id, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public String registerPayingOrder(Map<String, String> usrParamsMap, Map<String, String> appParamsMap, Map<String, String> oppParamsMap, String source) throws org.apache.thrift.TException {
            send_registerPayingOrder(usrParamsMap, appParamsMap, oppParamsMap, source);
            return recv_registerPayingOrder();
        }

        public void send_registerPayingOrder(Map<String, String> usrParamsMap, Map<String, String> appParamsMap, Map<String, String> oppParamsMap, String source) throws org.apache.thrift.TException {
            registerPayingOrder_args args = new registerPayingOrder_args();
            args.setUsrParamsMap(usrParamsMap);
            args.setAppParamsMap(appParamsMap);
            args.setOppParamsMap(oppParamsMap);
            args.setSource(source);
            sendBase("registerPayingOrder", args);
        }

        public String recv_registerPayingOrder() throws org.apache.thrift.TException {
            registerPayingOrder_result result = new registerPayingOrder_result();
            receiveBase(result, "registerPayingOrder");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerPayingOrder failed: unknown result");
        }

        public int getPayingOrderPhase(String id, String source) throws org.apache.thrift.TException {
            send_getPayingOrderPhase(id, source);
            return recv_getPayingOrderPhase();
        }

        public void send_getPayingOrderPhase(String id, String source) throws org.apache.thrift.TException {
            getPayingOrderPhase_args args = new getPayingOrderPhase_args();
            args.setId(id);
            args.setSource(source);
            sendBase("getPayingOrderPhase", args);
        }

        public int recv_getPayingOrderPhase() throws org.apache.thrift.TException {
            getPayingOrderPhase_result result = new getPayingOrderPhase_result();
            receiveBase(result, "getPayingOrderPhase");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPayingOrderPhase failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void registerPayingOrder(Map<String, String> usrParamsMap, Map<String, String> appParamsMap, Map<String, String> oppParamsMap, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            registerPayingOrder_call method_call = new registerPayingOrder_call(usrParamsMap, appParamsMap, oppParamsMap, source, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class registerPayingOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
            private Map<String, String> usrParamsMap;
            private Map<String, String> appParamsMap;
            private Map<String, String> oppParamsMap;
            private String source;

            public registerPayingOrder_call(Map<String, String> usrParamsMap, Map<String, String> appParamsMap, Map<String, String> oppParamsMap, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.usrParamsMap = usrParamsMap;
                this.appParamsMap = appParamsMap;
                this.oppParamsMap = oppParamsMap;
                this.source = source;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerPayingOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
                registerPayingOrder_args args = new registerPayingOrder_args();
                args.setUsrParamsMap(usrParamsMap);
                args.setAppParamsMap(appParamsMap);
                args.setOppParamsMap(oppParamsMap);
                args.setSource(source);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_registerPayingOrder();
            }
        }

        public void getPayingOrderPhase(String id, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPayingOrderPhase_call method_call = new getPayingOrderPhase_call(id, source, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPayingOrderPhase_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String id;
            private String source;

            public getPayingOrderPhase_call(String id, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.source = source;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPayingOrderPhase", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPayingOrderPhase_args args = new getPayingOrderPhase_args();
                args.setId(id);
                args.setSource(source);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPayingOrderPhase();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("registerPayingOrder", new registerPayingOrder());
            processMap.put("getPayingOrderPhase", new getPayingOrderPhase());
            return processMap;
        }

        public static class registerPayingOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerPayingOrder_args> {
            public registerPayingOrder() {
                super("registerPayingOrder");
            }

            public registerPayingOrder_args getEmptyArgsInstance() {
                return new registerPayingOrder_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public registerPayingOrder_result getResult(I iface, registerPayingOrder_args args) throws org.apache.thrift.TException {
                registerPayingOrder_result result = new registerPayingOrder_result();
                result.success = iface.registerPayingOrder(args.usrParamsMap, args.appParamsMap, args.oppParamsMap, args.source);
                return result;
            }
        }

        public static class getPayingOrderPhase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPayingOrderPhase_args> {
            public getPayingOrderPhase() {
                super("getPayingOrderPhase");
            }

            public getPayingOrderPhase_args getEmptyArgsInstance() {
                return new getPayingOrderPhase_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPayingOrderPhase_result getResult(I iface, getPayingOrderPhase_args args) throws org.apache.thrift.TException {
                getPayingOrderPhase_result result = new getPayingOrderPhase_result();
                result.success = iface.getPayingOrderPhase(args.id, args.source);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("registerPayingOrder", new registerPayingOrder());
            processMap.put("getPayingOrderPhase", new getPayingOrderPhase());
            return processMap;
        }

        public static class registerPayingOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerPayingOrder_args, String> {
            public registerPayingOrder() {
                super("registerPayingOrder");
            }

            public registerPayingOrder_args getEmptyArgsInstance() {
                return new registerPayingOrder_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        registerPayingOrder_result result = new registerPayingOrder_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        registerPayingOrder_result result = new registerPayingOrder_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, registerPayingOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.registerPayingOrder(args.usrParamsMap, args.appParamsMap, args.oppParamsMap, args.source, resultHandler);
            }
        }

        public static class getPayingOrderPhase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPayingOrderPhase_args, Integer> {
            public getPayingOrderPhase() {
                super("getPayingOrderPhase");
            }

            public getPayingOrderPhase_args getEmptyArgsInstance() {
                return new getPayingOrderPhase_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        getPayingOrderPhase_result result = new getPayingOrderPhase_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getPayingOrderPhase_result result = new getPayingOrderPhase_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPayingOrderPhase_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.getPayingOrderPhase(args.id, args.source, resultHandler);
            }
        }

    }

    public static class registerPayingOrder_args implements org.apache.thrift.TBase<registerPayingOrder_args, registerPayingOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerPayingOrder_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerPayingOrder_args");

        private static final org.apache.thrift.protocol.TField USR_PARAMS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("usrParamsMap", org.apache.thrift.protocol.TType.MAP, (short) 1);
        private static final org.apache.thrift.protocol.TField APP_PARAMS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("appParamsMap", org.apache.thrift.protocol.TType.MAP, (short) 2);
        private static final org.apache.thrift.protocol.TField OPP_PARAMS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("oppParamsMap", org.apache.thrift.protocol.TType.MAP, (short) 3);
        private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new registerPayingOrder_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new registerPayingOrder_argsTupleSchemeFactory());
        }

        public Map<String, String> usrParamsMap; // required
        public Map<String, String> appParamsMap; // required
        public Map<String, String> oppParamsMap; // required
        public String source; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USR_PARAMS_MAP((short) 1, "usrParamsMap"),
            APP_PARAMS_MAP((short) 2, "appParamsMap"),
            OPP_PARAMS_MAP((short) 3, "oppParamsMap"),
            SOURCE((short) 4, "source");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USR_PARAMS_MAP
                        return USR_PARAMS_MAP;
                    case 2: // APP_PARAMS_MAP
                        return APP_PARAMS_MAP;
                    case 3: // OPP_PARAMS_MAP
                        return OPP_PARAMS_MAP;
                    case 4: // SOURCE
                        return SOURCE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USR_PARAMS_MAP, new org.apache.thrift.meta_data.FieldMetaData("usrParamsMap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.APP_PARAMS_MAP, new org.apache.thrift.meta_data.FieldMetaData("appParamsMap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.OPP_PARAMS_MAP, new org.apache.thrift.meta_data.FieldMetaData("oppParamsMap", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerPayingOrder_args.class, metaDataMap);
        }

        public registerPayingOrder_args() {
        }

        public registerPayingOrder_args(
                Map<String, String> usrParamsMap,
                Map<String, String> appParamsMap,
                Map<String, String> oppParamsMap,
                String source) {
            this();
            this.usrParamsMap = usrParamsMap;
            this.appParamsMap = appParamsMap;
            this.oppParamsMap = oppParamsMap;
            this.source = source;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerPayingOrder_args(registerPayingOrder_args other) {
            if (other.isSetUsrParamsMap()) {
                Map<String, String> __this__usrParamsMap = new HashMap<String, String>(other.usrParamsMap);
                this.usrParamsMap = __this__usrParamsMap;
            }
            if (other.isSetAppParamsMap()) {
                Map<String, String> __this__appParamsMap = new HashMap<String, String>(other.appParamsMap);
                this.appParamsMap = __this__appParamsMap;
            }
            if (other.isSetOppParamsMap()) {
                Map<String, String> __this__oppParamsMap = new HashMap<String, String>(other.oppParamsMap);
                this.oppParamsMap = __this__oppParamsMap;
            }
            if (other.isSetSource()) {
                this.source = other.source;
            }
        }

        public registerPayingOrder_args deepCopy() {
            return new registerPayingOrder_args(this);
        }

        @Override
        public void clear() {
            this.usrParamsMap = null;
            this.appParamsMap = null;
            this.oppParamsMap = null;
            this.source = null;
        }

        public int getUsrParamsMapSize() {
            return (this.usrParamsMap == null) ? 0 : this.usrParamsMap.size();
        }

        public void putToUsrParamsMap(String key, String val) {
            if (this.usrParamsMap == null) {
                this.usrParamsMap = new HashMap<String, String>();
            }
            this.usrParamsMap.put(key, val);
        }

        public Map<String, String> getUsrParamsMap() {
            return this.usrParamsMap;
        }

        public registerPayingOrder_args setUsrParamsMap(Map<String, String> usrParamsMap) {
            this.usrParamsMap = usrParamsMap;
            return this;
        }

        public void unsetUsrParamsMap() {
            this.usrParamsMap = null;
        }

        /**
         * Returns true if field usrParamsMap is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUsrParamsMap() {
            return this.usrParamsMap != null;
        }

        public void setUsrParamsMapIsSet(boolean value) {
            if (!value) {
                this.usrParamsMap = null;
            }
        }

        public int getAppParamsMapSize() {
            return (this.appParamsMap == null) ? 0 : this.appParamsMap.size();
        }

        public void putToAppParamsMap(String key, String val) {
            if (this.appParamsMap == null) {
                this.appParamsMap = new HashMap<String, String>();
            }
            this.appParamsMap.put(key, val);
        }

        public Map<String, String> getAppParamsMap() {
            return this.appParamsMap;
        }

        public registerPayingOrder_args setAppParamsMap(Map<String, String> appParamsMap) {
            this.appParamsMap = appParamsMap;
            return this;
        }

        public void unsetAppParamsMap() {
            this.appParamsMap = null;
        }

        /**
         * Returns true if field appParamsMap is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAppParamsMap() {
            return this.appParamsMap != null;
        }

        public void setAppParamsMapIsSet(boolean value) {
            if (!value) {
                this.appParamsMap = null;
            }
        }

        public int getOppParamsMapSize() {
            return (this.oppParamsMap == null) ? 0 : this.oppParamsMap.size();
        }

        public void putToOppParamsMap(String key, String val) {
            if (this.oppParamsMap == null) {
                this.oppParamsMap = new HashMap<String, String>();
            }
            this.oppParamsMap.put(key, val);
        }

        public Map<String, String> getOppParamsMap() {
            return this.oppParamsMap;
        }

        public registerPayingOrder_args setOppParamsMap(Map<String, String> oppParamsMap) {
            this.oppParamsMap = oppParamsMap;
            return this;
        }

        public void unsetOppParamsMap() {
            this.oppParamsMap = null;
        }

        /**
         * Returns true if field oppParamsMap is set (has been assigned a value) and false otherwise
         */
        public boolean isSetOppParamsMap() {
            return this.oppParamsMap != null;
        }

        public void setOppParamsMapIsSet(boolean value) {
            if (!value) {
                this.oppParamsMap = null;
            }
        }

        public String getSource() {
            return this.source;
        }

        public registerPayingOrder_args setSource(String source) {
            this.source = source;
            return this;
        }

        public void unsetSource() {
            this.source = null;
        }

        /**
         * Returns true if field source is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSource() {
            return this.source != null;
        }

        public void setSourceIsSet(boolean value) {
            if (!value) {
                this.source = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USR_PARAMS_MAP:
                    if (value == null) {
                        unsetUsrParamsMap();
                    } else {
                        setUsrParamsMap((Map<String, String>) value);
                    }
                    break;

                case APP_PARAMS_MAP:
                    if (value == null) {
                        unsetAppParamsMap();
                    } else {
                        setAppParamsMap((Map<String, String>) value);
                    }
                    break;

                case OPP_PARAMS_MAP:
                    if (value == null) {
                        unsetOppParamsMap();
                    } else {
                        setOppParamsMap((Map<String, String>) value);
                    }
                    break;

                case SOURCE:
                    if (value == null) {
                        unsetSource();
                    } else {
                        setSource((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USR_PARAMS_MAP:
                    return getUsrParamsMap();

                case APP_PARAMS_MAP:
                    return getAppParamsMap();

                case OPP_PARAMS_MAP:
                    return getOppParamsMap();

                case SOURCE:
                    return getSource();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USR_PARAMS_MAP:
                    return isSetUsrParamsMap();
                case APP_PARAMS_MAP:
                    return isSetAppParamsMap();
                case OPP_PARAMS_MAP:
                    return isSetOppParamsMap();
                case SOURCE:
                    return isSetSource();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerPayingOrder_args)
                return this.equals((registerPayingOrder_args) that);
            return false;
        }

        public boolean equals(registerPayingOrder_args that) {
            if (that == null)
                return false;

            boolean this_present_usrParamsMap = true && this.isSetUsrParamsMap();
            boolean that_present_usrParamsMap = true && that.isSetUsrParamsMap();
            if (this_present_usrParamsMap || that_present_usrParamsMap) {
                if (!(this_present_usrParamsMap && that_present_usrParamsMap))
                    return false;
                if (!this.usrParamsMap.equals(that.usrParamsMap))
                    return false;
            }

            boolean this_present_appParamsMap = true && this.isSetAppParamsMap();
            boolean that_present_appParamsMap = true && that.isSetAppParamsMap();
            if (this_present_appParamsMap || that_present_appParamsMap) {
                if (!(this_present_appParamsMap && that_present_appParamsMap))
                    return false;
                if (!this.appParamsMap.equals(that.appParamsMap))
                    return false;
            }

            boolean this_present_oppParamsMap = true && this.isSetOppParamsMap();
            boolean that_present_oppParamsMap = true && that.isSetOppParamsMap();
            if (this_present_oppParamsMap || that_present_oppParamsMap) {
                if (!(this_present_oppParamsMap && that_present_oppParamsMap))
                    return false;
                if (!this.oppParamsMap.equals(that.oppParamsMap))
                    return false;
            }

            boolean this_present_source = true && this.isSetSource();
            boolean that_present_source = true && that.isSetSource();
            if (this_present_source || that_present_source) {
                if (!(this_present_source && that_present_source))
                    return false;
                if (!this.source.equals(that.source))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_usrParamsMap = true && (isSetUsrParamsMap());
            list.add(present_usrParamsMap);
            if (present_usrParamsMap)
                list.add(usrParamsMap);

            boolean present_appParamsMap = true && (isSetAppParamsMap());
            list.add(present_appParamsMap);
            if (present_appParamsMap)
                list.add(appParamsMap);

            boolean present_oppParamsMap = true && (isSetOppParamsMap());
            list.add(present_oppParamsMap);
            if (present_oppParamsMap)
                list.add(oppParamsMap);

            boolean present_source = true && (isSetSource());
            list.add(present_source);
            if (present_source)
                list.add(source);

            return list.hashCode();
        }

        @Override
        public int compareTo(registerPayingOrder_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUsrParamsMap()).compareTo(other.isSetUsrParamsMap());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsrParamsMap()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usrParamsMap, other.usrParamsMap);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAppParamsMap()).compareTo(other.isSetAppParamsMap());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAppParamsMap()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appParamsMap, other.appParamsMap);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOppParamsMap()).compareTo(other.isSetOppParamsMap());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOppParamsMap()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oppParamsMap, other.oppParamsMap);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSource()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerPayingOrder_args(");
            boolean first = true;

            sb.append("usrParamsMap:");
            if (this.usrParamsMap == null) {
                sb.append("null");
            } else {
                sb.append(this.usrParamsMap);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("appParamsMap:");
            if (this.appParamsMap == null) {
                sb.append("null");
            } else {
                sb.append(this.appParamsMap);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("oppParamsMap:");
            if (this.oppParamsMap == null) {
                sb.append("null");
            } else {
                sb.append(this.oppParamsMap);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("source:");
            if (this.source == null) {
                sb.append("null");
            } else {
                sb.append(this.source);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class registerPayingOrder_argsStandardSchemeFactory implements SchemeFactory {
            public registerPayingOrder_argsStandardScheme getScheme() {
                return new registerPayingOrder_argsStandardScheme();
            }
        }

        private static class registerPayingOrder_argsStandardScheme extends StandardScheme<registerPayingOrder_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerPayingOrder_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USR_PARAMS_MAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                                    struct.usrParamsMap = new HashMap<String, String>(2 * _map0.size);
                                    String _key1;
                                    String _val2;
                                    for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                                        _key1 = iprot.readString();
                                        _val2 = iprot.readString();
                                        struct.usrParamsMap.put(_key1, _val2);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setUsrParamsMapIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // APP_PARAMS_MAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                                    struct.appParamsMap = new HashMap<String, String>(2 * _map4.size);
                                    String _key5;
                                    String _val6;
                                    for (int _i7 = 0; _i7 < _map4.size; ++_i7) {
                                        _key5 = iprot.readString();
                                        _val6 = iprot.readString();
                                        struct.appParamsMap.put(_key5, _val6);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setAppParamsMapIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // OPP_PARAMS_MAP
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                                    struct.oppParamsMap = new HashMap<String, String>(2 * _map8.size);
                                    String _key9;
                                    String _val10;
                                    for (int _i11 = 0; _i11 < _map8.size; ++_i11) {
                                        _key9 = iprot.readString();
                                        _val10 = iprot.readString();
                                        struct.oppParamsMap.put(_key9, _val10);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setOppParamsMapIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // SOURCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.source = iprot.readString();
                                struct.setSourceIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerPayingOrder_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.usrParamsMap != null) {
                    oprot.writeFieldBegin(USR_PARAMS_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.usrParamsMap.size()));
                        for (Map.Entry<String, String> _iter12 : struct.usrParamsMap.entrySet()) {
                            oprot.writeString(_iter12.getKey());
                            oprot.writeString(_iter12.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.appParamsMap != null) {
                    oprot.writeFieldBegin(APP_PARAMS_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.appParamsMap.size()));
                        for (Map.Entry<String, String> _iter13 : struct.appParamsMap.entrySet()) {
                            oprot.writeString(_iter13.getKey());
                            oprot.writeString(_iter13.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.oppParamsMap != null) {
                    oprot.writeFieldBegin(OPP_PARAMS_MAP_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.oppParamsMap.size()));
                        for (Map.Entry<String, String> _iter14 : struct.oppParamsMap.entrySet()) {
                            oprot.writeString(_iter14.getKey());
                            oprot.writeString(_iter14.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.source != null) {
                    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
                    oprot.writeString(struct.source);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerPayingOrder_argsTupleSchemeFactory implements SchemeFactory {
            public registerPayingOrder_argsTupleScheme getScheme() {
                return new registerPayingOrder_argsTupleScheme();
            }
        }

        private static class registerPayingOrder_argsTupleScheme extends TupleScheme<registerPayingOrder_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerPayingOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUsrParamsMap()) {
                    optionals.set(0);
                }
                if (struct.isSetAppParamsMap()) {
                    optionals.set(1);
                }
                if (struct.isSetOppParamsMap()) {
                    optionals.set(2);
                }
                if (struct.isSetSource()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetUsrParamsMap()) {
                    {
                        oprot.writeI32(struct.usrParamsMap.size());
                        for (Map.Entry<String, String> _iter15 : struct.usrParamsMap.entrySet()) {
                            oprot.writeString(_iter15.getKey());
                            oprot.writeString(_iter15.getValue());
                        }
                    }
                }
                if (struct.isSetAppParamsMap()) {
                    {
                        oprot.writeI32(struct.appParamsMap.size());
                        for (Map.Entry<String, String> _iter16 : struct.appParamsMap.entrySet()) {
                            oprot.writeString(_iter16.getKey());
                            oprot.writeString(_iter16.getValue());
                        }
                    }
                }
                if (struct.isSetOppParamsMap()) {
                    {
                        oprot.writeI32(struct.oppParamsMap.size());
                        for (Map.Entry<String, String> _iter17 : struct.oppParamsMap.entrySet()) {
                            oprot.writeString(_iter17.getKey());
                            oprot.writeString(_iter17.getValue());
                        }
                    }
                }
                if (struct.isSetSource()) {
                    oprot.writeString(struct.source);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerPayingOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map18 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.usrParamsMap = new HashMap<String, String>(2 * _map18.size);
                        String _key19;
                        String _val20;
                        for (int _i21 = 0; _i21 < _map18.size; ++_i21) {
                            _key19 = iprot.readString();
                            _val20 = iprot.readString();
                            struct.usrParamsMap.put(_key19, _val20);
                        }
                    }
                    struct.setUsrParamsMapIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.appParamsMap = new HashMap<String, String>(2 * _map22.size);
                        String _key23;
                        String _val24;
                        for (int _i25 = 0; _i25 < _map22.size; ++_i25) {
                            _key23 = iprot.readString();
                            _val24 = iprot.readString();
                            struct.appParamsMap.put(_key23, _val24);
                        }
                    }
                    struct.setAppParamsMapIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.oppParamsMap = new HashMap<String, String>(2 * _map26.size);
                        String _key27;
                        String _val28;
                        for (int _i29 = 0; _i29 < _map26.size; ++_i29) {
                            _key27 = iprot.readString();
                            _val28 = iprot.readString();
                            struct.oppParamsMap.put(_key27, _val28);
                        }
                    }
                    struct.setOppParamsMapIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.source = iprot.readString();
                    struct.setSourceIsSet(true);
                }
            }
        }

    }

    public static class registerPayingOrder_result implements org.apache.thrift.TBase<registerPayingOrder_result, registerPayingOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerPayingOrder_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerPayingOrder_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new registerPayingOrder_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new registerPayingOrder_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerPayingOrder_result.class, metaDataMap);
        }

        public registerPayingOrder_result() {
        }

        public registerPayingOrder_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerPayingOrder_result(registerPayingOrder_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public registerPayingOrder_result deepCopy() {
            return new registerPayingOrder_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public registerPayingOrder_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerPayingOrder_result)
                return this.equals((registerPayingOrder_result) that);
            return false;
        }

        public boolean equals(registerPayingOrder_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(registerPayingOrder_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerPayingOrder_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class registerPayingOrder_resultStandardSchemeFactory implements SchemeFactory {
            public registerPayingOrder_resultStandardScheme getScheme() {
                return new registerPayingOrder_resultStandardScheme();
            }
        }

        private static class registerPayingOrder_resultStandardScheme extends StandardScheme<registerPayingOrder_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerPayingOrder_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerPayingOrder_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerPayingOrder_resultTupleSchemeFactory implements SchemeFactory {
            public registerPayingOrder_resultTupleScheme getScheme() {
                return new registerPayingOrder_resultTupleScheme();
            }
        }

        private static class registerPayingOrder_resultTupleScheme extends TupleScheme<registerPayingOrder_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerPayingOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerPayingOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getPayingOrderPhase_args implements org.apache.thrift.TBase<getPayingOrderPhase_args, getPayingOrderPhase_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPayingOrderPhase_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPayingOrderPhase_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPayingOrderPhase_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPayingOrderPhase_argsTupleSchemeFactory());
        }

        public String id; // required
        public String source; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id"),
            SOURCE((short) 2, "source");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // SOURCE
                        return SOURCE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPayingOrderPhase_args.class, metaDataMap);
        }

        public getPayingOrderPhase_args() {
        }

        public getPayingOrderPhase_args(
                String id,
                String source) {
            this();
            this.id = id;
            this.source = source;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPayingOrderPhase_args(getPayingOrderPhase_args other) {
            if (other.isSetId()) {
                this.id = other.id;
            }
            if (other.isSetSource()) {
                this.source = other.source;
            }
        }

        public getPayingOrderPhase_args deepCopy() {
            return new getPayingOrderPhase_args(this);
        }

        @Override
        public void clear() {
            this.id = null;
            this.source = null;
        }

        public String getId() {
            return this.id;
        }

        public getPayingOrderPhase_args setId(String id) {
            this.id = id;
            return this;
        }

        public void unsetId() {
            this.id = null;
        }

        /**
         * Returns true if field id is set (has been assigned a value) and false otherwise
         */
        public boolean isSetId() {
            return this.id != null;
        }

        public void setIdIsSet(boolean value) {
            if (!value) {
                this.id = null;
            }
        }

        public String getSource() {
            return this.source;
        }

        public getPayingOrderPhase_args setSource(String source) {
            this.source = source;
            return this;
        }

        public void unsetSource() {
            this.source = null;
        }

        /**
         * Returns true if field source is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSource() {
            return this.source != null;
        }

        public void setSourceIsSet(boolean value) {
            if (!value) {
                this.source = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((String) value);
                    }
                    break;

                case SOURCE:
                    if (value == null) {
                        unsetSource();
                    } else {
                        setSource((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case SOURCE:
                    return getSource();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case SOURCE:
                    return isSetSource();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPayingOrderPhase_args)
                return this.equals((getPayingOrderPhase_args) that);
            return false;
        }

        public boolean equals(getPayingOrderPhase_args that) {
            if (that == null)
                return false;

            boolean this_present_id = true && this.isSetId();
            boolean that_present_id = true && that.isSetId();
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (!this.id.equals(that.id))
                    return false;
            }

            boolean this_present_source = true && this.isSetSource();
            boolean that_present_source = true && that.isSetSource();
            if (this_present_source || that_present_source) {
                if (!(this_present_source && that_present_source))
                    return false;
                if (!this.source.equals(that.source))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_id = true && (isSetId());
            list.add(present_id);
            if (present_id)
                list.add(id);

            boolean present_source = true && (isSetSource());
            list.add(present_source);
            if (present_source)
                list.add(source);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPayingOrderPhase_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSource()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPayingOrderPhase_args(");
            boolean first = true;

            sb.append("id:");
            if (this.id == null) {
                sb.append("null");
            } else {
                sb.append(this.id);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("source:");
            if (this.source == null) {
                sb.append("null");
            } else {
                sb.append(this.source);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPayingOrderPhase_argsStandardSchemeFactory implements SchemeFactory {
            public getPayingOrderPhase_argsStandardScheme getScheme() {
                return new getPayingOrderPhase_argsStandardScheme();
            }
        }

        private static class getPayingOrderPhase_argsStandardScheme extends StandardScheme<getPayingOrderPhase_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPayingOrderPhase_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.id = iprot.readString();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SOURCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.source = iprot.readString();
                                struct.setSourceIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPayingOrderPhase_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.id != null) {
                    oprot.writeFieldBegin(ID_FIELD_DESC);
                    oprot.writeString(struct.id);
                    oprot.writeFieldEnd();
                }
                if (struct.source != null) {
                    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
                    oprot.writeString(struct.source);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPayingOrderPhase_argsTupleSchemeFactory implements SchemeFactory {
            public getPayingOrderPhase_argsTupleScheme getScheme() {
                return new getPayingOrderPhase_argsTupleScheme();
            }
        }

        private static class getPayingOrderPhase_argsTupleScheme extends TupleScheme<getPayingOrderPhase_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPayingOrderPhase_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetSource()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeString(struct.id);
                }
                if (struct.isSetSource()) {
                    oprot.writeString(struct.source);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPayingOrderPhase_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readString();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.source = iprot.readString();
                    struct.setSourceIsSet(true);
                }
            }
        }

    }

    public static class getPayingOrderPhase_result implements org.apache.thrift.TBase<getPayingOrderPhase_result, getPayingOrderPhase_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPayingOrderPhase_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPayingOrderPhase_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPayingOrderPhase_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPayingOrderPhase_resultTupleSchemeFactory());
        }

        public int success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPayingOrderPhase_result.class, metaDataMap);
        }

        public getPayingOrderPhase_result() {
        }

        public getPayingOrderPhase_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPayingOrderPhase_result(getPayingOrderPhase_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public getPayingOrderPhase_result deepCopy() {
            return new getPayingOrderPhase_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public getPayingOrderPhase_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Integer.valueOf(getSuccess());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPayingOrderPhase_result)
                return this.equals((getPayingOrderPhase_result) that);
            return false;
        }

        public boolean equals(getPayingOrderPhase_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPayingOrderPhase_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPayingOrderPhase_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPayingOrderPhase_resultStandardSchemeFactory implements SchemeFactory {
            public getPayingOrderPhase_resultStandardScheme getScheme() {
                return new getPayingOrderPhase_resultStandardScheme();
            }
        }

        private static class getPayingOrderPhase_resultStandardScheme extends StandardScheme<getPayingOrderPhase_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPayingOrderPhase_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPayingOrderPhase_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPayingOrderPhase_resultTupleSchemeFactory implements SchemeFactory {
            public getPayingOrderPhase_resultTupleScheme getScheme() {
                return new getPayingOrderPhase_resultTupleScheme();
            }
        }

        private static class getPayingOrderPhase_resultTupleScheme extends TupleScheme<getPayingOrderPhase_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPayingOrderPhase_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPayingOrderPhase_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
